import numpy as np
import shap
from tensorflow.keras.models import Model

# Function for Layer-wise Relevance Propagation (LRP)
def LRP(model, data):
    # Initialize relevance scores at the output layer to be the output itself
    R = model.predict(data)
    
    # Loop through each layer in reverse order (from output to input)
    for layer in reversed(model.layers):
        # Get activations and weights for the current layer
        a = Model(inputs=model.input, outputs=layer.output).predict(data)
        w = layer.get_weights()[0]
        
        # Compute relevance scores for the previous layer
        R_prev = np.zeros_like(a)
        for i in range(a.shape[1]):
            for j in range(R.shape[1]):
                R_prev[:, i] += (a[:, i] * w[i, j]) / np.sum(a[:, :] * w[:, j], axis=1) * R[:, j]
        
        # Update relevance scores for the next iteration
        R = R_prev
    
    # Return relevance scores for input features
    return R

# Function for SHapley Additive exPlanations (SHAP)
def SHAP(model, data):
    explainer = shap.Explainer(model, data)
    shap_values = explainer(data)
    
    # Return SHAP values for input features
    return shap_values.values

# Main function for integrating XAI methods
def IntegrateXAI(model, dataset, xai_method):
    if xai_method == "LRP":
        explanation = LRP(model, dataset)
    elif xai_method == "SHAP":
        explanation = SHAP(model, dataset)
    else:
        raise ValueError("Invalid XAI method specified")
    
    return explanation

# Example usage
# Assuming 'trained_model' is a trained deep learning model and 'some_dataset' is the dataset you want to explain
# xai_method can be either "LRP" or "SHAP"

explanation = IntegrateXAI(trained_model, some_dataset, xai_method="LRP")

